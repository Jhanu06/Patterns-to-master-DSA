### 📘 14. Backtracking

#### 🧠 Concept

**Backtracking** is a recursive algorithmic technique that tries to build a solution incrementally and removes choices that fail to satisfy the constraints — like **exploring all paths** and **backtracking** when you hit a dead end.

It is used to solve **combinatorial problems** like generating permutations, combinations, or solving puzzles.

---

#### 📌 When to Use

* When the problem involves **exploring all possible solutions**
* When you need to build a solution **step by step**
* When the problem involves **choices and constraints** (e.g., Sudoku, N-Queens)
* Keywords: “all combinations”, “all permutations”, “subset of items”, “valid configurations”

---

#### ⚙️ How to Use

1. Use recursion to try **all possible choices** for a current position.
2. At each step:
   - **Choose** an option
   - **Explore** further with that choice (recursive call)
   - **Unchoose** (backtrack) to try other options
3. Use **pruning** to eliminate paths early if they violate constraints.

---

#### 💻 Example Problem

**Problem:**  
Generate all permutations of a given list of numbers.

**Input:**  
`nums = [1, 2, 3]`

**Output:**  
`[[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]`

**Explanation:**  
Try each number at each position, recursively build the rest, and backtrack when a configuration is complete.

---

#### 🔗 LeetCode Practice

* [46. Permutations](https://leetcode.com/problems/permutations/)
* [78. Subsets](https://leetcode.com/problems/subsets/)
* [131. Palindrome Partitioning](https://leetcode.com/problems/palindrome-partitioning/)
* [51. N-Queens](https://leetcode.com/problems/n-queens/)
* [39. Combination Sum](https://leetcode.com/problems/combination-sum/)
* [37. Sudoku Solver](https://leetcode.com/problems/sudoku-solver/)

---
