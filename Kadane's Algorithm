### 📘 9. Kadane's Algorithm

#### 🧠 Concept

**Kadane’s Algorithm** is a dynamic programming technique used to **find the maximum sum of a contiguous subarray** in linear time. It efficiently solves the famous **"Maximum Subarray Sum"** problem.

Instead of checking every possible subarray (which would take O(n²) time), Kadane’s Algorithm keeps track of the **current subarray sum** and updates the **maximum sum found so far** in one pass.

---

#### 📌 When to Use

* When you are asked to **find the maximum sum of a contiguous subarray**
* To solve problems involving **fluctuating positive and negative values**
* When you need a **linear time (O(n))** solution for subarray sum problems

---

#### ⚙️ How to Use

1. Initialize:
   - `max_sum = nums[0]`
   - `current_sum = nums[0]`

2. Iterate through the array from index 1:
   - `current_sum = max(nums[i], current_sum + nums[i])`
   - `max_sum = max(max_sum, current_sum)`

3. Return `max_sum`

---

#### 💻 Example Problem

**Problem:**  
Find the maximum sum of a contiguous subarray.

**Input:**  
`nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]`

**Output:**  
`6`

**Explanation:**  
The subarray `[4, -1, 2, 1]` has the largest sum = 6.

---

#### 🔗 LeetCode Practice

* [53. Maximum Subarray](https://leetcode.com/problems/maximum-subarray/)
* [918. Maximum Sum Circular Subarray](https://leetcode.com/problems/maximum-sum-circular-subarray/)
* [152. Maximum Product Subarray](https://leetcode.com/problems/maximum-product-subarray/)

---
