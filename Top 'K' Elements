### 📘 7. Top 'K' Elements

#### 🧠 Concept

The **Top 'K' Elements** pattern is used to find the **k largest or smallest elements** from an array or stream of data.  
This is typically done using a **heap (priority queue)** or by sorting.

---

#### 📌 When to Use

* When you need to find the **k-th largest/smallest element**
* When you want the **top k frequent**, **top k scores**, etc.
* When working with **streaming data** where sorting the full list isn't feasible

---

#### ⚙️ How to Use

1. **Use a Min Heap** (priority queue) of size `k` to store the top `k` largest elements.
2. Iterate through the array:
   - Add each element to the heap.
   - If the heap size exceeds `k`, remove the **smallest element**.
3. After the iteration, the **root of the heap** will be the k-th largest element.

---

#### 💻 Example Problem

**Problem:**  
Find the `k`-th largest element in an unsorted array.

**Input:**  
`nums = [3, 2, 1, 5, 6, 4]`, `k = 2`

**Output:**  
`5`

**Explanation:**  
Use a **min-heap** of size 2:
- Add 3 → [3]
- Add 2 → [2, 3]
- Add 1 → [2, 3] → Remove 1
- Add 5 → [3, 5]
- Add 6 → [5, 6]
- Add 4 → [5, 6] → Remove 4  
The root of the heap is `5`, which is the **2nd largest element**.

---

#### 🔗 LeetCode Practice

* [215. Kth Largest Element in an Array](https://leetcode.com/problems/kth-largest-element-in-an-array/)
* [347. Top K Frequent Elements](https://leetcode.com/problems/top-k-frequent-elements/)
* [373. Find K Pairs with Smallest Sums](https://leetcode.com/problems/find-k-pairs-with-smallest-sums/)

---
