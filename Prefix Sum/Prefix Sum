
### 📘 1. Prefix Sum

#### 🧠 Concept

Prefix Sum involves preprocessing an array to create a new array where each element at index `i` represents the **sum of elements from index `0` to `i`** in the original array.
This helps answer **range sum queries in O(1)** time after an O(n) preprocessing step.

---

#### 📌 When to Use

* When you need to perform **multiple subarray sum queries**
* When you want to calculate **cumulative totals**
* Optimizing brute-force solutions with repeated sum calculations

---

#### ⚙️ How to Use

1. Create a prefix sum array `P` such that:
   `P[0] = A[0]`
   `P[i] = P[i-1] + A[i]` for `i > 0`

2. To get the sum of elements from index `i` to `j`:
   `Sum(i, j) = P[j] - P[i-1]`
   (If `i == 0`, use `P[j]` directly)

---

#### 💻 Example Problem

**Problem:**
Given an array `nums`, answer multiple queries for the sum of elements between indices `i` and `j`.

**Input:**
`nums = [1, 2, 3, 4, 5, 6]`, `i = 1`, `j = 3`

**Output:**
`9`

**Explanation:**
Prefix sum array:
`P = [1, 3, 6, 10, 15, 21]`

Then:
`sum(1, 3) = P[3] - P[0] = 10 - 1 = 9`

---

#### 🔗 LeetCode Practice

* [303. Range Sum Query - Immutable](https://leetcode.com/problems/range-sum-query-immutable/)
* [525. Contiguous Array](https://leetcode.com/problems/contiguous-array/)
* [560. Subarray Sum Equals K](https://leetcode.com/problems/subarray-sum-equals-k/)

---
