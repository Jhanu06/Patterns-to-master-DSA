# 🪟 Sliding Window Pattern

## 🔍 What is Sliding Window?

The **Sliding Window** is a technique used to handle **contiguous subarrays or substrings** efficiently. Instead of recalculating values from scratch each time, a "window" slides across the data to reuse previous computations. This makes it much faster than brute-force approaches.

---

## 🧠 When to Use Sliding Window?

Use the **Sliding Window** pattern when:
- The problem involves **subarrays or substrings** (i.e., elements next to each other).
- You're asked to **optimize** (maximum, minimum, count, length, etc.) something over a range.
- A brute-force solution would require **nested loops** or time complexity **O(n²)**.
- The problem size is large and requires **O(n)** efficiency.

---

## ⚙️ How Does Sliding Window Work?

1. **Initialize a window** using two pointers (commonly `start` and `end`).
2. Expand the window by moving the `end` pointer.
3. If the condition is met, update the result (max/min/count/etc.).
4. If the condition is violated, shrink the window from the `start` side.
5. Repeat until the `end` reaches the end of the data structure.

---

## 🧪 Sample Problem Explanation

**Problem:** Find the maximum sum of a subarray of size `k`.  
**Input:** `[2, 1, 5, 1, 3, 2]`, `k = 3`  
**Explanation:**  
We move a window of size `k = 3` over the array:
- [2, 1, 5] → sum = 8  
- [1, 5, 1] → sum = 7  
- [5, 1, 3] → sum = 9 ✅  
- [1, 3, 2] → sum = 6  

The maximum sum encountered is **9**.

---

## 📌 Common LeetCode Problems

| Problem Name | LeetCode Number |
|--------------|-----------------|
| Maximum Average Subarray I | #643 |
| Longest Substring Without Repeating Characters | #3 |
| Minimum Window Substring | #76 |
| Longest Repeating Character Replacement | #424 |
| Longest Subarray of 1's After Deleting One Element | #1493 |

---

## 📚 Types of Sliding Window

| Type | Description | Example Use |
|------|-------------|-------------|
| Fixed-size Window | Window size remains constant | Maximum sum of subarray of size `k` |
| Variable-size Window | Window size changes based on condition | Longest substring without repeating characters |
| Dynamic + Hash/Set | Track frequency or uniqueness | Minimum window substring |

---

## 🌟 Advantages

- Reduces time complexity from **O(n²)** to **O(n)**.
- Simple logic, easy to implement.
- Works well with **strings** and **arrays**.
- Can be combined with **HashMap**, **Set**, or **Counter** for more advanced logic.

---

## 📝 Summary Table

| Feature | Description |
|--------|-------------|
| Pattern Goal | Find/track something in contiguous elements |
| Input Type | Array or String |
| Optimization | Time-efficient, linear scanning |
| Best For | Problems involving subarrays or substrings |

---

